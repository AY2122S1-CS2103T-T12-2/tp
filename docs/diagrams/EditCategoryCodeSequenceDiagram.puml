@startuml
'https://plantuml.com/sequence-diagram
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":EditCommandParser" as EditCommandParser LOGIC_COLOR
participant "editPersonDescriptor:EditPersonDescriptor" as EditPersonDescriptor LOGIC_COLOR
participant "e:EditCommand" as EditCommand LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
end box

box Parser STORAGE_COLOR_T1
participant ":ParserUtil" as ParserUtil STORAGE_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
participant "editedPerson:Person" as Person MODEL_COLOR
end box

[-> LogicManager : execute("edit 1 c/att")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("edit 1 c/att")
activate AddressBookParser

create EditCommandParser
AddressBookParser -> EditCommandParser
activate EditCommandParser

EditCommandParser -> AddressBookParser
deactivate EditCommandParser

AddressBookParser -> EditCommandParser: parse("edit 1 c/att")
activate EditCommandParser

create ParserUtil
EditCommandParser -> ParserUtil
activate ParserUtil

ParserUtil -> EditCommandParser
deactivate ParserUtil

create EditCommand
EditCommandParser -> EditCommand: EditCommand(1, personDescriptor)
activate EditCommand

create EditPersonDescriptor
EditCommand -> EditPersonDescriptor
activate EditPersonDescriptor

EditPersonDescriptor -> EditCommand
deactivate EditPersonDescriptor

EditCommand -> EditCommandParser
deactivate EditCommand

EditCommandParser -> AddressBookParser
deactivate EditCommandParser

AddressBookParser -> LogicManager
deactivate AddressBookParser

LogicManager -> EditCommand: execute(model)
deactivate LogicManager

activate EditCommand
EditCommand -> EditCommand: createEditedPerson(personToEdit, editPersonDescriptor)
note bottom: personToEdit is the Person object to be edited
activate EditCommand

create Person
EditCommand -> Person
note left: creates another person with the updated attributes
activate Person

Person -> EditCommand
deactivate Person
deactivate EditCommand

EditCommand -> Model: setPerson(personToEdit, editedPerson)
activate Model

Model -> EditCommand
deactivate Model

EditCommand -> Model: updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS)
activate Model

Model -> EditCommand
deactivate Model

create CommandResult
EditCommand -> CommandResult
activate CommandResult

CommandResult -> EditCommand
deactivate CommandResult

EditCommand -> LogicManager
deactivate EditCommand

[<--LogicManager
deactivate LogicManager

@enduml
